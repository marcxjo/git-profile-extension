#!/bin/bash

shopt -s nullglob

. /usr/share/bash-completion/completions/git

__git_profile_get_matching_profile_names() {
  local -rn profiles_arr="$1"
  local -r cur="$2"
  local -r profiles_dir="$3"

  for profile_dir in "${profiles_dir%/}/$cur"*; do
    profiles_arr+=("${profile_dir##*/}")
  done
}

_git_profile() {
  local -r cur="${COMP_WORDS[COMP_CWORD]}"
  local -r profiles_dir="${GIT_PROFILE_CONFIG_HOME:-${HOME}/.config/git/profiles}"

  local -a profiles

  local -ar arg2_subcmds=('add')
  local -a arg2_candidates=("${arg2_subcmds[@]}")

  local profile

  case $COMP_CWORD in
  0 | 1)
    return
    ;;
  2)
    __git_profile_get_matching_profile_names 'profiles' "$cur" "$profiles_dir"
    arg2_candidates+=("${profiles[@]}")

    __gitcomp "${arg2_candidates[*]}"
    return
    ;;
  *)
    local -r profile_cmd_arg="${COMP_WORDS[2]}"

    if [[ "$profile_cmd_arg" == 'add' ]]; then
      # git-profile subcommand - takes no args
      return
    fi

    __git_profile_get_matching_profile_names 'profiles' "$profile_cmd_arg" "$profiles_dir"

    if [[ ${#profiles[@]} -eq 0 ]]; then
      # Unsupported scenario
      return
    fi

    profile="${profiles_dir%/}/${profile_cmd_arg}/config"
    ;;
  esac

  local -r OLD_COMP_SUBSTR="${COMP_WORDS[*]:1:2}"
  local -r COMP_WORDS_REBUILT=('git' "${COMP_WORDS[@]:3}")

  # Forward a Git command line without the `profile` option and arg so that we
  # can take advantage of completion for all available commands
  # Note that we substract the trailing space from COMP_POINT
  # to prevent displacing the completion cursor
  COMP_WORDS=("${COMP_WORDS_REBUILT[@]}")
  COMP_LINE="${COMP_WORDS_REBUILT[*]}"
  COMP_CWORD=$((COMP_CWORD - 2))
  COMP_POINT=$((COMP_POINT - ${#OLD_COMP_SUBSTR} - 1))

  GIT_CONFIG_GLOBAL="$profile" _comp_command_offset 0
}
